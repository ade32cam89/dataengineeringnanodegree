{
	"name": "dataflow_union_payroll_historical_payroll",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sqldb_nyc_payroll_data",
						"type": "DatasetReference"
					},
					"name": "sourcesqldbpayroll"
				},
				{
					"dataset": {
						"referenceName": "ds_datalake_historicalpayroll",
						"type": "DatasetReference"
					},
					"name": "sourcehistoricalpayrolldatalake"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_synapse_NYC_Payroll_Summary",
						"type": "DatasetReference"
					},
					"name": "sinktosynapse"
				}
			],
			"transformations": [
				{
					"name": "unionpayrollhistorical"
				},
				{
					"name": "filterfiscalyear"
				},
				{
					"name": "derivedColumntotalpaid"
				},
				{
					"name": "aggregategroupbyagencyyear"
				}
			],
			"scriptLines": [
				"parameters{",
				"     df_param_fiscalyear as integer (2020)",
				"}",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourcesqldbpayroll",
				"source(output(",
				"          FiscalYear as short,",
				"          PayrollNumber as short,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcehistoricalpayrolldatalake",
				"sourcehistoricalpayrolldatalake, sourcesqldbpayroll union(byName: true)~> unionpayrollhistorical",
				"unionpayrollhistorical filter(toInteger(FiscalYear) >= $df_param_fiscalyear) ~> filterfiscalyear",
				"filterfiscalyear derive(SumPaid = RegularGrossPaid+TotalOTPaid+TotalOtherPay) ~> derivedColumntotalpaid",
				"derivedColumntotalpaid aggregate(groupBy(AgencyName,",
				"          FiscalYear),",
				"     TotalPaid = sum(SumPaid)) ~> aggregategroupbyagencyyear",
				"aggregategroupbyagencyyear sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FiscalYear as integer,",
				"          AgencyName as string,",
				"          TotalPaid as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinktosynapse"
			]
		}
	}
}